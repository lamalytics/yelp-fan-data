Data Scientist Role Play: Profiling and Analyzing the Yelp Dataset Coursera Worksheet

This is a 2-part assignment. In the first part, you are asked a series of questions that will help you profile and understand the data just like a data scientist would. For this first part of the assignment, you will be assessed both on the correctness of your findings, as well as the code you used to arrive at your answer. You will be graded on how easy your code is to read, so remember to use proper formatting and comments where necessary.

In the second part of the assignment, you are asked to come up with your own inferences and analysis of the data for a particular research question you want to answer. You will be required to prepare the dataset for the analysis you choose to do. As with the first part, you will be graded, in part, on how easy your code is to read, so use proper formatting and comments to illustrate and communicate your intent as required.

For both parts of this assignment, use this "worksheet." It provides all the questions you are being asked, and your job will be to transfer your answers and SQL coding where indicated into this worksheet so that your peers can review your work. You should be able to use any Text Editor (Windows Notepad, Apple TextEdit, Notepad ++, Sublime Text, etc.) to copy and paste your answers. If you are going to use Word or some other page layout application, just be careful to make sure your answers and code are lined appropriately.
In this case, you may want to save as a PDF to ensure your formatting remains intact for you reviewer.



Part 1: Yelp Dataset Profiling and Understanding

1. Profile the data by finding the total number of records for each of the tables below:
	
    i. Attribute table = 10000
    ii. Business table = 10000
    iii. Category table = 10000
    iv. Checkin table = 10000
    v. elite_years table = 10000
    vi. friend table = 10000
    vii. hours table = 10000
    viii. photo table = 10000
    ix. review table = 10000
    x. tip table = 10000
    xi. user table = 10000
	


2. Find the total distinct records by either the foreign key or primary key for each table. If two foreign keys are listed in the table, please specify which foreign key.

    i. Business = id:10000
    ii. Hours = business_id:1562
    iii. Category = business_id:2643
    iv. Attribute = business_id:1115
    v. Review = id:10000
    vi. Checkin = business_id:493
    vii. Photo = id:10000
    viii. Tip = user_id:537
    ix. User = id:10000
    x. Friend = user_id:11
    xi. Elite_years = user_id:2780

Note: Primary Keys are denoted in the ER-Diagram with a yellow key icon.	



3. Are there any columns with null values in the Users table? Indicate "yes," or "no."

	Answer: no
	
	
	SQL code used to arrive at answer:
    SELECT *
    FROM user
    WHERE COALESCE (id, name, review_count, yelping_since, useful, funny, cool, fans,
    average_stars, compliment_hot, compliment_more, compliment_profile, compliment_cute,
    compliment_list, compliment_note, compliment_plain, compliment_cool, compliment_funny,
    compliment_writer, compliment_photos) IS NULL;
	
	

	
4. For each table and column listed below, display the smallest (minimum), largest (maximum), and average (mean) value for the following fields:

	i. Table: Review, Column: Stars
	
		min: 1		max: 5		avg: 3.7082
		
	
	ii. Table: Business, Column: Stars
	
		min: 1		max: 5		avg: 3.6549
		
	
	iii. Table: Tip, Column: Likes
	
		min: 0		max: 2		avg: 0.0144
		
	
	iv. Table: Checkin, Column: Count
	
		min: 1		max: 53		avg: 1.9414
		
	
	v. Table: User, Column: Review_count
	
		min: 0 		max: 2000		avg: 24.2995
		


5. List the cities with the most reviews in descending order:

	SQL code used to arrive at answer:
    SELECT city, SUM(review_count) as total_reviews
    FROM business
    GROUP BY city
    ORDER BY total_reviews DESC;
	
	Copy and Paste the Result Below:
    
    | city            | total_reviews |
    +-----------------+---------------+
    | Las Vegas       |         82854 |
    | Phoenix         |         34503 |
    | Toronto         |         24113 |
    | Scottsdale      |         20614 |
    | Charlotte       |         12523 |
    | Henderson       |         10871 |
    | Tempe           |         10504 |
    | Pittsburgh      |          9798 |
    | Montréal        |          9448 |
    | Chandler        |          8112 |
    | Mesa            |          6875 |
    | Gilbert         |          6380 |
    | Cleveland       |          5593 |
    | Madison         |          5265 |
    | Glendale        |          4406 |
    | Mississauga     |          3814 |
    | Edinburgh       |          2792 |
    | Peoria          |          2624 |
    | North Las Vegas |          2438 |
    | Markham         |          2352 |
    | Champaign       |          2029 |
    | Stuttgart       |          1849 |
    | Surprise        |          1520 |
    | Lakewood        |          1465 |
    | Goodyear        |          1155 |
	

	
6. Find the distribution of star ratings to the business in the following cities:

i. Avon

    SQL code used to arrive at answer:
    SELECT stars, SUM(review_count) as review_count
    FROM business
    WHERE city = 'Avon'
    GROUP BY stars
    ORDER BY stars DESC;

Copy and Paste the Resulting Table Below (2 columns â€“ star rating and count):
    +-------+--------------+
    | stars | review_count |
    +-------+--------------+
    |   5.0 |            3 |
    |   4.5 |           31 |
    |   4.0 |           21 |
    |   3.5 |           88 |
    |   2.5 |            6 |
    |   1.5 |           10 |
    +-------+--------------+

ii. Beachwood

    SQL code used to arrive at answer:
    SELECT stars, SUM(review_count) as review_count
    FROM business
    WHERE city = 'Beachwood'
    GROUP BY stars
    ORDER BY stars DESC;

Copy and Paste the Resulting Table Below (2 columns â€“ star rating and count):
    +-------+--------------+
    | stars | review_count |
    +-------+--------------+
    |   5.0 |           23 |
    |   4.5 |           17 |
    |   4.0 |           69 |
    |   3.5 |            6 |
    |   3.0 |           11 |
    |   2.5 |            3 |
    |   2.0 |            8 |
    +-------+--------------+


7. Find the top 3 users based on their total number of reviews:
		
	SQL code used to arrive at answer:
	SELECT id, name, review_count
    FROM user
    ORDER BY review_count DESC
    LIMIT 3;
		
	Copy and Paste the Result Below:
	+------------------------+--------+--------------+
    | id                     | name   | review_count |
    +------------------------+--------+--------------+
    | -G7Zkl1wIWBBmD0KRy_sCw | Gerald |         2000 |
    | -3s52C4zL_DHRK0ULG6qtg | Sara   |         1629 |
    | -8lbUNlXVSoXqaRRiHiSNg | Yuri   |         1339 |
    +------------------------+--------+--------------+


8. Does posing more reviews correlate with more fans?

	Please explain your findings and interpretation of the results:
	I do not believe there is a significant correlations between more reviews --> more fans. I created a Reviews_per_fan metric
    that explains that the lower the number, the more fans the user has per review. The top users have wildly different results
    with 10% fans for the top rating user vs 17% for the 23rd most review_count user. It is hard to say that this is a sole 
    indicator; however, it can be an indicator among others.
    
    SELECT id, name, review_count, fans, (review_count / fans) as Reviews_per_Fan
    FROM user
    ORDER BY review_count DESC;

    +------------------------+-----------+--------------+------+-----------------+
    | id                     | name      | review_count | fans | Reviews_per_Fan |
    +------------------------+-----------+--------------+------+-----------------+
    | -G7Zkl1wIWBBmD0KRy_sCw | Gerald    |         2000 |  253 |               7 |
    | -3s52C4zL_DHRK0ULG6qtg | Sara      |         1629 |   50 |              32 |
    | -8lbUNlXVSoXqaRRiHiSNg | Yuri      |         1339 |   76 |              17 |
    | -K2Tcgh2EKX6e6HqqIrBIQ | .Hon      |         1246 |  101 |              12 |
    | -FZBTkAZEXoP7CYvRV2ZwQ | William   |         1215 |  126 |               9 |
    | --2vR0DIsmQ6WfcSzKWigw | Harald    |         1153 |  311 |               3 |
    | -gokwePdbXjfS0iF7NsUGA | eric      |         1116 |   16 |              69 |
    | -DFCC64NXgqrxlO8aLU5rg | Roanna    |         1039 |  104 |               9 |
    | -8EnCioUmDygAbsYZmTeRQ | Mimi      |          968 |  497 |               1 |
    | -0IiMAZI2SsQ7VmyzJjokQ | Christine |          930 |  173 |               5 |
    | -fUARDNuXAfrOn4WLSZLgA | Ed        |          904 |   38 |              23 |
    | -hKniZN2OdshWLHYuj21jQ | Nicole    |          864 |   43 |              20 |
    | -9da1xk7zgnnfO1uTVYGkA | Fran      |          862 |  124 |               6 |
    | -B-QEUESGWHPE_889WJaeg | Mark      |          861 |  115 |               7 |
    | -kLVfaJytOJY2-QdQoCcNQ | Christina |          842 |   85 |               9 |
    | -kO6984fXByyZm3_6z2JYg | Dominic   |          836 |   37 |              22 |
    | -lh59ko3dxChBSZ9U7LfUw | Lissa     |          834 |  120 |               6 |
    | -g3XIcCb2b-BD0QBCcq2Sw | Lisa      |          813 |  159 |               5 |
    | -l9giG8TSDBG1jnUBUXp5w | Alison    |          775 |   61 |              12 |
    | -dw8f7FLaUmWR7bfJ_Yf0w | Sui       |          754 |   78 |               9 |
    | -AaBjWJYiQxXkCMDlXfPGw | Tim       |          702 |   35 |              20 |
    | -jt1ACMiZljnBFvS6RRvnA | L         |          696 |   10 |              69 |
    | -IgKkE8JvYNWeGu8ze4P8Q | Angela    |          694 |  101 |               6 |
    | -hxUwfo3cMnLTv-CAaP69A | Crissy    |          676 |   25 |              27 |
    | -H6cTbVxeIRYR-atxdielQ | Lyn       |          675 |   45 |              15 |
    +------------------------+-----------+--------------+------+-----------------+
    (Output limit exceeded, 25 of 10000 total rows shown)

	
9. Are there more reviews with the word "love" or with the word "hate" in them?

	Answer: 
    There is more "hate" than "love" in the reviews. This does not necessarily mean that most reviews are hateful.
    For example: I hate to go to Taco Bell, I'd would rather go to McDonalds. (review for McDonalds)
	
	SQL code used to arrive at answer:
    SELECT COUNT(text)
    FROM review
    WHERE text LIKE '%love%' OR text LIKE '%Love%' OR text LIKE '%LOVE%'
    UNION
    SELECT COUNT(text)
    FROM review
    WHERE text LIKE '%hate%' OR text LIKE '%Hate%' OR text LIKE '%HATE%';

    +-------------+
    | COUNT(text) |
    +-------------+
    |         232 |
    |        1780 |
    +-------------+
	
	
10. Find the top 10 users with the most fans:

	SQL code used to arrive at answer:
	SELECT id, name, fans
    FROM user
    ORDER BY fans DESC
    LIMIT 10;
	
	Copy and Paste the Result Below:
    +------------------------+-----------+------+
    | id                     | name      | fans |
    +------------------------+-----------+------+
    | -9I98YbNQnLdAmcYfb324Q | Amy       |  503 |
    | -8EnCioUmDygAbsYZmTeRQ | Mimi      |  497 |
    | --2vR0DIsmQ6WfcSzKWigw | Harald    |  311 |
    | -G7Zkl1wIWBBmD0KRy_sCw | Gerald    |  253 |
    | -0IiMAZI2SsQ7VmyzJjokQ | Christine |  173 |
    | -g3XIcCb2b-BD0QBCcq2Sw | Lisa      |  159 |
    | -9bbDysuiWeo2VShFJJtcw | Cat       |  133 |
    | -FZBTkAZEXoP7CYvRV2ZwQ | William   |  126 |
    | -9da1xk7zgnnfO1uTVYGkA | Fran      |  124 |
    | -lh59ko3dxChBSZ9U7LfUw | Lissa     |  120 |
    +------------------------+-----------+------+
	
		

Part 2: Inferences and Analysis

1. Pick one city and category of your choice and group the businesses in that city or category by their overall star rating. Compare the businesses with 2-3 stars to the businesses with 4-5 stars and answer the following questions. Include your code.
	City = 'Las Vegas' , Category = 'Restaurants'

Tables needed for analysis: business, category, hours

SELECT Rating, unique_businesses, total_reviews, days_open, (days_open / unique_businesses) as avg_days_open_per_week
FROM(
    SELECT 
    CASE 
    WHEN b.stars BETWEEN 2 AND 3 THEN '2 - 3 stars'
    WHEN b.stars BETWEEN 4 AND 5 THEN '4 - 5 stars'
    ELSE '< 2 stars' END AS 'Rating',
    COUNT (DISTINCT b.id) as unique_businesses,
    COUNT(DISTINCT hours) as days_open,
    SUM(review_count) as total_reviews
    FROM business b 
    INNER JOIN category c ON  b.id = c.business_id
    INNER JOIN hours h ON b.id = h.business_id
    WHERE b.city = 'Las Vegas' AND c.category = 'Restaurants'
    GROUP BY Rating
) as t1

+-------------+-------------------+---------------+-----------+------------------------+
| Rating      | unique_businesses | total_reviews | days_open | avg_days_open_per_week |
+-------------+-------------------+---------------+-----------+------------------------+
| 2 - 3 stars |                 1 |           861 |         7 |                      7 |
| 4 - 5 stars |                 2 |          6552 |        14 |                      7 |
+-------------+-------------------+---------------+-----------+------------------------+
i. Do the two groups you chose to analyze have a different distribution of hours? 
There is no significant evidence to show that having different distribution of hours results in ratings increase/decrease given two parameters: Las Vegas and Restaurants.
Larger sample (not shown) also supports this claim; however, a large sample size would improve results. 


ii. Do the two groups you chose to analyze have a different number of reviews?
4 - 5 stars had a siginicantly larger amount of reviews than 2 - 3 stars. Begs the question if the review distribution follows a J-curve of high amount of 1, 4, and 5 stars and low amount of 2 and 3 stars.
         
iii. Are you able to infer anything from the location data provided between these two groups? Explain.
+-------------+---------------------+--------------+---------------------------------+-----------+-------+-------------+
| Rating      | name                | neighborhood | address                         | city      | state | postal_code |
+-------------+---------------------+--------------+---------------------------------+-----------+-------+-------------+
| 4 - 5 stars | Jacques Cafe        | Summerlin    | 1910 Village Center Cir, Unit 1 | Las Vegas | NV    | 89134       |
| 4 - 5 stars | Big Wong Restaurant | Chinatown    | 5040 Spring Mountain Rd         | Las Vegas | NV    | 89146       |
| 2 - 3 stars | Wingstop            |              | 5045 W Tropicana Ave            | Las Vegas | NV    | 89103       |
+-------------+---------------------+--------------+---------------------------------+-----------+-------+-------------+
Data is fairly thin in this instance with only 3 distinct restaurants. Will need a more expansive dataset to confirm any patterns within parameters.
At a glance, it does look like Summerlin and Chinatown have some decent restaurants.

SQL code used for analysis:
SELECT DISTINCT
CASE 
WHEN b.stars BETWEEN 2 AND 3 THEN '2 - 3 stars'
WHEN b.stars BETWEEN 4 AND 5 THEN '4 - 5 stars'
ELSE '< 2 stars' END AS 'Rating',
b.name,
b.neighborhood,
b.address,
b.city,
b.state,
b.postal_code
FROM business b 
INNER JOIN category c ON  b.id = c.business_id
INNER JOIN hours h ON b.id = h.business_id
WHERE b.city = 'Las Vegas' AND c.category = 'Restaurants'
ORDER BY Rating DESC;
		
		
2. Group business based on the ones that are open and the ones that are closed. What differences can you find between the ones that are still open and the ones that are closed? List at least two differences and the SQL code you used to arrive at your answer.
+--------+-------------------+---------------+---------------+-----------------+
| Open   | num_of_businesses |    avg_rating | most_reviewed | unique_category |
+--------+-------------------+---------------+---------------+-----------------+
| Closed |               122 | 3.66393442623 |           168 |              71 |
| Open   |               574 | 3.89982578397 |           768 |             235 |
+--------+-------------------+---------------+---------------+-----------------+
i. Difference 1: Total count of businesses between 'closed' and 'open' are vastly different in terms of number of businesses. Maybe reviews help a business stay open or yelp phases out closed businesses. 

         
ii. Difference 2: The unique_amount of catergories are more diverse in open businesses than closed ones. Interesting to see that diversity may play a role in the closing of business.
         
         
         
SELECT
CASE 
WHEN b.is_open = 0 THEN 'Closed'
WHEN b.is_open = 1 THEN 'Open'
END AS 'Open',
COUNT(b.id) as num_of_businesses,
AVG(b.stars) as avg_rating,
MAX(b.review_count) as most_reviewed, -- most reviewed business review count
COUNT(DISTINCT c.category) as unique_category
FROM business b 
INNER JOIN category c ON  b.id = c.business_id
GROUP BY Open;
	
	
3. For this last part of your analysis, you are going to choose the type of analysis you want to conduct on the Yelp dataset and are going to prepare the data for analysis.

Ideas for analysis include: Parsing out keywords and business attributes for sentiment analysis, clustering businesses to find commonalities or anomalies between them, predicting the overall star rating for a business, predicting the number of fans a user will have, and so on. These are just a few examples to get you started, so feel free to be creative and come up with your own problem you want to solve. Provide answers, in-line, to all of the following:

i. Indicate the type of analysis you chose to do:
     I will be doing a predictive analysis on attributes for high fan yelp users. 
         
ii. Write 1-2 brief paragraphs on the type of data you will need for your analysis and why you chose that data:
I was curious to see the general attributes to analyze if there are any particular factors that contribute to fans. I used only the user table with columns: fans, reviews, average_stars, and yelping_since.
I chose this data because I believe these would be strong indicators in generating an increase in fans. From the looks of it, it does not seem that average rating of businesses plays a role in fans. However,
the age of the account and average review count are strong indicators for generating fans. This does make logical sense because age + exposure through numerous reviews will generate a following.
                  
iii. Output of your finished dataset:
+--------------+----------------------+---------------+---------------+
| Fan_Count    | average_review_count | average_stars |   account_age |
+--------------+----------------------+---------------+---------------+
| >= 100 fans  |                891.5 |         3.835 |       12.6875 |
| < 50 fans    |        21.5514572864 | 3.69853668342 | 9.18201005025 |
| 50 - 99 fans |        420.411764706 | 3.89970588235 | 12.6764705882 |
+--------------+----------------------+---------------+---------------+
         
iv. Provide the SQL code you used to create your final dataset:
SELECT 
CASE 
WHEN fans BETWEEN 100 AND 5000 THEN '>= 100 fans'
WHEN fans BETWEEN 50 AND 99 THEN '50 - 99 fans'
ELSE '< 50 fans' END AS 'Fan_Count',
AVG(review_count) as average_review_count,
AVG(average_stars) as average_stars,
AVG(DATE('now') - yelping_since) AS account_age
FROM User
GROUP BY Fan_Count
ORDER BY Fan_Count DESC;
